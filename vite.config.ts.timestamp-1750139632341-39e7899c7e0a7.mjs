// vite.config.ts
import { defineConfig } from "file:///home/project/node_modules/vite/dist/node/index.js";
import react from "file:///home/project/node_modules/@vitejs/plugin-react/dist/index.mjs";

// src/lib/security.ts
import { z } from "file:///home/project/node_modules/zod/lib/index.mjs";
var passwordSchema = z.string().min(8, "Password must be at least 8 characters").regex(/[A-Z]/, "Password must contain at least one uppercase letter").regex(/[a-z]/, "Password must contain at least one lowercase letter").regex(/[0-9]/, "Password must contain at least one number").regex(/[^A-Za-z0-9]/, "Password must contain at least one special character");
var SessionManager = class _SessionManager {
  static SESSION_TIMEOUT = 30 * 60 * 1e3;
  // 30 minutes
  static startSession() {
    const session = {
      startTime: Date.now(),
      lastActivity: Date.now()
    };
    localStorage.setItem("session", JSON.stringify(session));
  }
  static updateActivity() {
    const sessionStr = localStorage.getItem("session");
    if (sessionStr) {
      const session = JSON.parse(sessionStr);
      session.lastActivity = Date.now();
      localStorage.setItem("session", JSON.stringify(session));
    }
  }
  static isSessionExpired() {
    const sessionStr = localStorage.getItem("session");
    if (!sessionStr) return true;
    const session = JSON.parse(sessionStr);
    const inactiveTime = Date.now() - session.lastActivity;
    return inactiveTime > _SessionManager.SESSION_TIMEOUT;
  }
  static endSession() {
    localStorage.removeItem("session");
  }
};
var securityHeaders = {
  "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://*.supabase.co https://api.stripe.com; frame-src 'self' https://js.stripe.com;",
  "X-Content-Type-Options": "nosniff",
  "X-Frame-Options": "DENY",
  "X-XSS-Protection": "1; mode=block",
  "Referrer-Policy": "strict-origin-when-cross-origin",
  "Permissions-Policy": "camera=(), microphone=(), geolocation=()"
};

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ["lucide-react"]
  },
  server: {
    headers: securityHeaders
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAic3JjL2xpYi9zZWN1cml0eS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9ob21lL3Byb2plY3RcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL2hvbWUvcHJvamVjdC92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0JztcbmltcG9ydCB7IHNlY3VyaXR5SGVhZGVycyB9IGZyb20gJy4vc3JjL2xpYi9zZWN1cml0eSc7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFtyZWFjdCgpXSxcbiAgb3B0aW1pemVEZXBzOiB7XG4gICAgZXhjbHVkZTogWydsdWNpZGUtcmVhY3QnXSxcbiAgfSxcbiAgc2VydmVyOiB7XG4gICAgaGVhZGVyczogc2VjdXJpdHlIZWFkZXJzXG4gIH1cbn0pOyIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL2hvbWUvcHJvamVjdC9zcmMvbGliXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3NyYy9saWIvc2VjdXJpdHkudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL2hvbWUvcHJvamVjdC9zcmMvbGliL3NlY3VyaXR5LnRzXCI7aW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8vIFBhc3N3b3JkIHZhbGlkYXRpb24gc2NoZW1hXG5leHBvcnQgY29uc3QgcGFzc3dvcmRTY2hlbWEgPSB6XG4gIC5zdHJpbmcoKVxuICAubWluKDgsICdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycycpXG4gIC5yZWdleCgvW0EtWl0vLCAnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyJylcbiAgLnJlZ2V4KC9bYS16XS8sICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXInKVxuICAucmVnZXgoL1swLTldLywgJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbnVtYmVyJylcbiAgLnJlZ2V4KC9bXkEtWmEtejAtOV0vLCAnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlcicpO1xuXG4vLyBJbnB1dCBzYW5pdGl6YXRpb25cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUlucHV0KGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gaW5wdXRcbiAgICAucmVwbGFjZSgvWzw+XS9nLCAnJykgLy8gUmVtb3ZlIDwgYW5kID5cbiAgICAudHJpbSgpO1xufVxuXG4vLyBSYXRlIGxpbWl0aW5nIGhlbHBlclxuZXhwb3J0IGNsYXNzIFJhdGVMaW1pdGVyIHtcbiAgcHJpdmF0ZSBhdHRlbXB0czogTWFwPHN0cmluZywgeyBjb3VudDogbnVtYmVyOyB0aW1lc3RhbXA6IG51bWJlciB9PiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBtYXhBdHRlbXB0czogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHdpbmRvd01zOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IobWF4QXR0ZW1wdHM6IG51bWJlciwgd2luZG93TXM6IG51bWJlcikge1xuICAgIHRoaXMubWF4QXR0ZW1wdHMgPSBtYXhBdHRlbXB0cztcbiAgICB0aGlzLndpbmRvd01zID0gd2luZG93TXM7XG4gIH1cblxuICBpc1JhdGVMaW1pdGVkKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBhdHRlbXB0ID0gdGhpcy5hdHRlbXB0cy5nZXQoa2V5KTtcblxuICAgIGlmICghYXR0ZW1wdCkge1xuICAgICAgdGhpcy5hdHRlbXB0cy5zZXQoa2V5LCB7IGNvdW50OiAxLCB0aW1lc3RhbXA6IG5vdyB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gYXR0ZW1wdC50aW1lc3RhbXAgPiB0aGlzLndpbmRvd01zKSB7XG4gICAgICB0aGlzLmF0dGVtcHRzLnNldChrZXksIHsgY291bnQ6IDEsIHRpbWVzdGFtcDogbm93IH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChhdHRlbXB0LmNvdW50ID49IHRoaXMubWF4QXR0ZW1wdHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGF0dGVtcHQuY291bnQrKztcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gU2Vzc2lvbiBtYW5hZ2VtZW50XG5leHBvcnQgY2xhc3MgU2Vzc2lvbk1hbmFnZXIge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBTRVNTSU9OX1RJTUVPVVQgPSAzMCAqIDYwICogMTAwMDsgLy8gMzAgbWludXRlc1xuXG4gIHN0YXRpYyBzdGFydFNlc3Npb24oKTogdm9pZCB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IHtcbiAgICAgIHN0YXJ0VGltZTogRGF0ZS5ub3coKSxcbiAgICAgIGxhc3RBY3Rpdml0eTogRGF0ZS5ub3coKSxcbiAgICB9O1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZXNzaW9uJywgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUFjdGl2aXR5KCk6IHZvaWQge1xuICAgIGNvbnN0IHNlc3Npb25TdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2Vzc2lvbicpO1xuICAgIGlmIChzZXNzaW9uU3RyKSB7XG4gICAgICBjb25zdCBzZXNzaW9uID0gSlNPTi5wYXJzZShzZXNzaW9uU3RyKTtcbiAgICAgIHNlc3Npb24ubGFzdEFjdGl2aXR5ID0gRGF0ZS5ub3coKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZXNzaW9uJywgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbikpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBpc1Nlc3Npb25FeHBpcmVkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNlc3Npb25TdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2Vzc2lvbicpO1xuICAgIGlmICghc2Vzc2lvblN0cikgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBzZXNzaW9uID0gSlNPTi5wYXJzZShzZXNzaW9uU3RyKTtcbiAgICBjb25zdCBpbmFjdGl2ZVRpbWUgPSBEYXRlLm5vdygpIC0gc2Vzc2lvbi5sYXN0QWN0aXZpdHk7XG4gICAgcmV0dXJuIGluYWN0aXZlVGltZSA+IFNlc3Npb25NYW5hZ2VyLlNFU1NJT05fVElNRU9VVDtcbiAgfVxuXG4gIHN0YXRpYyBlbmRTZXNzaW9uKCk6IHZvaWQge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzZXNzaW9uJyk7XG4gIH1cbn1cblxuLy8gU2VjdXJpdHkgaGVhZGVyc1xuZXhwb3J0IGNvbnN0IHNlY3VyaXR5SGVhZGVycyA9IHtcbiAgJ0NvbnRlbnQtU2VjdXJpdHktUG9saWN5JzogXG4gICAgXCJkZWZhdWx0LXNyYyAnc2VsZic7IFwiICtcbiAgICBcInNjcmlwdC1zcmMgJ3NlbGYnICd1bnNhZmUtaW5saW5lJyAndW5zYWZlLWV2YWwnOyBcIiArXG4gICAgXCJzdHlsZS1zcmMgJ3NlbGYnICd1bnNhZmUtaW5saW5lJzsgXCIgK1xuICAgIFwiaW1nLXNyYyAnc2VsZicgZGF0YTogaHR0cHM6OyBcIiArXG4gICAgXCJjb25uZWN0LXNyYyAnc2VsZicgaHR0cHM6Ly8qLnN1cGFiYXNlLmNvIGh0dHBzOi8vYXBpLnN0cmlwZS5jb207IFwiICtcbiAgICBcImZyYW1lLXNyYyAnc2VsZicgaHR0cHM6Ly9qcy5zdHJpcGUuY29tO1wiLFxuICAnWC1Db250ZW50LVR5cGUtT3B0aW9ucyc6ICdub3NuaWZmJyxcbiAgJ1gtRnJhbWUtT3B0aW9ucyc6ICdERU5ZJyxcbiAgJ1gtWFNTLVByb3RlY3Rpb24nOiAnMTsgbW9kZT1ibG9jaycsXG4gICdSZWZlcnJlci1Qb2xpY3knOiAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsXG4gICdQZXJtaXNzaW9ucy1Qb2xpY3knOiAnY2FtZXJhPSgpLCBtaWNyb3Bob25lPSgpLCBnZW9sb2NhdGlvbj0oKSdcbn07Il0sCiAgIm1hcHBpbmdzIjogIjtBQUF5TixTQUFTLG9CQUFvQjtBQUN0UCxPQUFPLFdBQVc7OztBQ0R5TixTQUFTLFNBQVM7QUFHdFAsSUFBTSxpQkFBaUIsRUFDM0IsT0FBTyxFQUNQLElBQUksR0FBRyx3Q0FBd0MsRUFDL0MsTUFBTSxTQUFTLHFEQUFxRCxFQUNwRSxNQUFNLFNBQVMscURBQXFELEVBQ3BFLE1BQU0sU0FBUywyQ0FBMkMsRUFDMUQsTUFBTSxnQkFBZ0Isc0RBQXNEO0FBNEN4RSxJQUFNLGlCQUFOLE1BQU0sZ0JBQWU7QUFBQSxFQUMxQixPQUF3QixrQkFBa0IsS0FBSyxLQUFLO0FBQUE7QUFBQSxFQUVwRCxPQUFPLGVBQXFCO0FBQzFCLFVBQU0sVUFBVTtBQUFBLE1BQ2QsV0FBVyxLQUFLLElBQUk7QUFBQSxNQUNwQixjQUFjLEtBQUssSUFBSTtBQUFBLElBQ3pCO0FBQ0EsaUJBQWEsUUFBUSxXQUFXLEtBQUssVUFBVSxPQUFPLENBQUM7QUFBQSxFQUN6RDtBQUFBLEVBRUEsT0FBTyxpQkFBdUI7QUFDNUIsVUFBTSxhQUFhLGFBQWEsUUFBUSxTQUFTO0FBQ2pELFFBQUksWUFBWTtBQUNkLFlBQU0sVUFBVSxLQUFLLE1BQU0sVUFBVTtBQUNyQyxjQUFRLGVBQWUsS0FBSyxJQUFJO0FBQ2hDLG1CQUFhLFFBQVEsV0FBVyxLQUFLLFVBQVUsT0FBTyxDQUFDO0FBQUEsSUFDekQ7QUFBQSxFQUNGO0FBQUEsRUFFQSxPQUFPLG1CQUE0QjtBQUNqQyxVQUFNLGFBQWEsYUFBYSxRQUFRLFNBQVM7QUFDakQsUUFBSSxDQUFDLFdBQVksUUFBTztBQUV4QixVQUFNLFVBQVUsS0FBSyxNQUFNLFVBQVU7QUFDckMsVUFBTSxlQUFlLEtBQUssSUFBSSxJQUFJLFFBQVE7QUFDMUMsV0FBTyxlQUFlLGdCQUFlO0FBQUEsRUFDdkM7QUFBQSxFQUVBLE9BQU8sYUFBbUI7QUFDeEIsaUJBQWEsV0FBVyxTQUFTO0FBQUEsRUFDbkM7QUFDRjtBQUdPLElBQU0sa0JBQWtCO0FBQUEsRUFDN0IsMkJBQ0U7QUFBQSxFQU1GLDBCQUEwQjtBQUFBLEVBQzFCLG1CQUFtQjtBQUFBLEVBQ25CLG9CQUFvQjtBQUFBLEVBQ3BCLG1CQUFtQjtBQUFBLEVBQ25CLHNCQUFzQjtBQUN4Qjs7O0FEakdBLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFBQSxFQUNqQixjQUFjO0FBQUEsSUFDWixTQUFTLENBQUMsY0FBYztBQUFBLEVBQzFCO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDTixTQUFTO0FBQUEsRUFDWDtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
